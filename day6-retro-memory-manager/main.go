package main

import (
    "bufio"
    "fmt"
    "os"
    "strconv"
    "strings"
)

func main() {
    fmt.Println("üñ•Ô∏è  –ó–ê–ì–†–£–ó–ö–ê RETRO MEMORY MANAGER...")
    fmt.Println("=====================================")
    fmt.Println()
    fmt.Println("üíæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ì–æ—à–∞!")
    fmt.Println("üìü –¢–≤–æ—è –º–∏—Å—Å–∏—è: –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –æ—Ç —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤")
    fmt.Println("üêπ –ò –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è Go –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!")
    fmt.Println()

    mm := NewMemoryManager()
    scanner := bufio.NewScanner(os.Stdin)

    for {
        mm.ShowMemory()

        fmt.Println()
        fmt.Println("‚öôÔ∏è  –ö–û–ú–ê–ù–î–´:")
        fmt.Println("   free games    - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –æ—Ç –∏–≥—Ä")
        fmt.Println("   free movies   - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –æ—Ç —Ñ–∏–ª—å–º–æ–≤")
        fmt.Println("   add <–ø—Ä–æ–µ–∫—Ç> <—Ä–∞–∑–º–µ—Ä> - –¥–æ–±–∞–≤–∏—Ç—å Go –ø—Ä–æ–µ–∫—Ç")
        fmt.Println("   motivation    - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é")
        fmt.Println("   exit          - –≤—ã—Ö–æ–¥")
        fmt.Println()
        fmt.Print("üöÄ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")

        if !scanner.Scan() {
            break
        }

        input := strings.TrimSpace(scanner.Text())
        command, argument := ParseInput(input)

        switch command {
        case "free":
            if argument == "games" {
                mm.FreeGameMemory()
            } else if argument == "movies" {
                mm.FreeMovieMemory()
            }
        case "add":
            parts := strings.Fields(argument)
            if len(parts) >= 2 {
                size, err := strconv.Atoi(parts[len(parts)-1])
                if err == nil {
                    name := strings.Join(parts[:len(parts)-1], " ")
                    mm.AddGoProject(name, size)
                }
            }
        case "motivation":
            mm.ShowMotivation()
        case "exit", "quit":
            fmt.Println()
            fmt.Println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, –ì–æ—à–∞!")
            fmt.Println("üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è —Å–≤–æ–µ–≥–æ –±—É–¥—É—â–µ–≥–æ!")
            return
        default:
            fmt.Println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        }

        fmt.Println()
        fmt.Print("‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        scanner.Scan()
    }
}
