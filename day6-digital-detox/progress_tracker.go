package main

import (
	"fmt"
	"time"
)

type ProgressTracker struct {
	startDate    time.Time
	goStudyHours int
	projectsDone int
	motivations  []string
}

func NewProgressTracker() *ProgressTracker {
	return &ProgressTracker{
		startDate: time.Now(),
		motivations: []string{
			"–ö–∞–∂–¥—ã–π —á–∞—Å –∫–æ–¥–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ç—ë–ø–ª–æ–º—É –æ—Ñ–∏—Å—É!",
			"–ò–≥—Ä—ã –¥–∞–ª–∏ —Ç–µ–±–µ —Ä–µ–∞–∫—Ü–∏—é, Go –¥–∞—Å—Ç —Ç–µ–±–µ –∫–∞—Ä—å–µ—Ä—É!",
			"25 –ª–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è ‚Üí 25 –ª–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è!",
			"–¢—ã –Ω–µ —Ç–µ—Ä—è–ª –≤—Ä–µ–º—è - —Ç—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞–ª –æ–ø—ã—Ç!",
			"–° –∫–∞–∂–¥—ã–º –¥–Ω—ë–º —Ç—ã –±–ª–∏–∂–µ –∫ —Ä–∞–±–æ—Ç–µ –º–µ—á—Ç—ã!",
		},
	}
}

func (pt *ProgressTracker) AddStudyTime(hours int) {
	pt.goStudyHours += hours
	fmt.Printf("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ %d —á–∞—Å–æ–≤ –∏–∑—É—á–µ–Ω–∏—è Go\n", hours)
	fmt.Printf("üìä –í—Å–µ–≥–æ: %d —á–∞—Å–æ–≤\n", pt.goStudyHours)
}

func (pt *ProgressTracker) AddProject() {
	pt.projectsDone++
	fmt.Printf("üéâ –ó–∞–≤–µ—Ä—à—ë–Ω –ø—Ä–æ–µ–∫—Ç ‚Ññ%d!\n", pt.projectsDone)
}

func (pt *ProgressTracker) ShowProgress() {
	daysSinceStart := int(time.Since(pt.startDate).Hours() / 24)

	fmt.Println("\nüìä –ü–†–û–ì–†–ï–°–° –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò:")
	fmt.Println("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
	fmt.Printf("üïê –° –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: %d –¥–Ω–µ–π\n", daysSinceStart)
	fmt.Printf("üêπ –ß–∞—Å–æ–≤ –∏–∑—É—á–µ–Ω–∏—è Go: %d\n", pt.goStudyHours)
	fmt.Printf("üöÄ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: %d\n", pt.projectsDone)
	fmt.Printf("üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: %.1f —á–∞—Å–æ–≤\n", float64(pt.goStudyHours)/float64(daysSinceStart+1))

	if pt.goStudyHours > 0 {
		fmt.Printf("üí° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 1 –ø—Ä–æ–µ–∫—Ç –Ω–∞ %d —á–∞—Å–æ–≤ –∏–∑—É—á–µ–Ω–∏—è\n", pt.goStudyHours/pt.projectsDone)
	}
}

func (pt *ProgressTracker) GetRandomMotivation() string {
	if len(pt.motivations) == 0 {
		return "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!"
	}
	return pt.motivations[time.Now().Unix()%int64(len(pt.motivations))]
}

func (pt *ProgressTracker) CalculateFuture() {
	monthsToJob := 6 - (pt.goStudyHours / 50) // —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
	if monthsToJob < 0 {
		monthsToJob = 0
	}

	fmt.Printf("\nüîÆ –ü–†–û–ì–ù–û–ó:\n")
	fmt.Printf("   –î–æ –ø–µ—Ä–≤–æ–π —Ä–∞–±–æ—Ç—ã Go-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: %d –º–µ—Å—è—Ü–µ–≤\n", monthsToJob)
	fmt.Printf("   –ü—Ä–∏ —Ç–µ–∫—É—â–µ–º —Ç–µ–º–ø–µ: –¥–æ %s\n",
		time.Now().AddDate(0, monthsToJob, 0).Format("02.01.2006"))

	if monthsToJob == 0 {
		fmt.Println("   üéâ –¢—ã –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã!")
	}
}
