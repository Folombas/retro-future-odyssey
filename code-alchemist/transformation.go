package main

import (
	"fmt"
	"time"
)

type TransmutationEngine struct {
	IsActive      bool
	StartTime     time.Time
	TotalHours    int
	Efficiency    int
}

type TransmutationResults struct {
	Efficiency       int
	TransmutedHours  int
	AcquiredSkills   int
	GoMasteryLevel   int
}

type TransformationProgress struct {
	TotalGamingHours int
	ErasAnalyzed     int
	TransformedHours int
	SkillsAcquired   int
	CurrentAddiction int
}

func NewTransmutationEngine() *TransmutationEngine {
	return &TransmutationEngine{
		IsActive:   false,
		Efficiency: 75, // –±–∞–∑–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–º—É—Ç–∞—Ü–∏–∏
	}
}

func NewProgressTracker() *TransformationProgress {
	return &TransformationProgress{
		CurrentAddiction: 85,
	}
}

func (t *TransmutationEngine) StartTransmutation(totalHours int) {
	t.IsActive = true
	t.StartTime = time.Now()
	t.TotalHours = totalHours

	fmt.Println("üî• –ê–ö–¢–ò–í–ê–¶–ò–Ø –ê–õ–•–ò–ú–ò–ß–ï–°–ö–û–ì–û –î–í–ò–ì–ê–¢–ï–õ–Ø...")

	// –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞–Ω—Å–º—É—Ç–∞—Ü–∏–∏
	stages := []string{
		"–ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...",
		"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤...",
		"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ...",
		"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Go...",
		"–°–∏–Ω—Ç–µ–∑ –Ω–æ–≤—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π...",
	}

	for _, stage := range stages {
		fmt.Printf("   %s", stage)
		// –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
		for j := 0; j < 3; j++ {
			fmt.Printf(".")
			time.Sleep(300 * time.Millisecond)
		}
		fmt.Printf(" ‚úÖ\n")

		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
		t.Efficiency += 5
		time.Sleep(1 * time.Second)
	}

	fmt.Println("üéä –¢–†–ê–ù–°–ú–£–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
}

func (t *TransmutationEngine) GetResults() TransmutationResults {
	transmutedHours := t.TotalHours * t.Efficiency / 100
	acquiredSkills := transmutedHours / 100 // 100 —á–∞—Å–æ–≤ –Ω–∞ –Ω–∞–≤—ã–∫
	goMastery := acquiredSkills * 2         // —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞

	if goMastery > 100 {
		goMastery = 100
	}

	return TransmutationResults{
		Efficiency:      t.Efficiency,
		TransmutedHours: transmutedHours,
		AcquiredSkills:  acquiredSkills,
		GoMasteryLevel:  goMastery,
	}
}

func (p *TransformationProgress) SetInitialMetrics(totalHours int, eras int) {
	p.TotalGamingHours = totalHours
	p.ErasAnalyzed = eras
	p.TransformedHours = totalHours * 75 / 100 // –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
	p.SkillsAcquired = p.TransformedHours / 100
	p.CurrentAddiction = 85
}

func (p *TransformationProgress) DisplayProgress(currentDay int, totalDays int) {
	progressPercent := (currentDay * 100) / totalDays
	transformationRate := (p.TransformedHours * 100) / p.TotalGamingHours

	fmt.Printf("   üìÖ –î–µ–Ω—å %d –∏–∑ %d\n", currentDay, totalDays)
	fmt.Printf("   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–∞: %d%%\n", progressPercent)
	fmt.Printf("   üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: %d%%\n", transformationRate)
	fmt.Printf("   üí° –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: %d\n", p.SkillsAcquired)
	fmt.Printf("   üéÆ –¢–µ–∫—É—â–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: %d%%\n", p.CurrentAddiction)

	// –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	bar := "["
	for i := 0; i < 20; i++ {
		if i < progressPercent/5 {
			bar += "‚ñà"
		} else {
			bar += "‚ñë"
		}
	}
	bar += "]"
	fmt.Printf("   %s\n", bar)
}

func (p *TransformationProgress) UpdateTransformation(hoursTransformed int, skillsGained int) {
	p.TransformedHours += hoursTransformed
	p.SkillsAcquired += skillsGained
	p.CurrentAddiction -= 10 // —É–º–µ–Ω—å—à–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

	if p.CurrentAddiction < 0 {
		p.CurrentAddiction = 0
	}
}
