package main

import (
	"fmt"
	"time"
)

type GamingLegacy struct {
	TotalGamesPlayed int
	FavoriteGenres   []string
	Achievements     []GameAchievement
	Skills           map[string]int
}

type GameAchievement struct {
	Game      string
	Achievement string
	Date      string
	Impact    string // –ö–∞–∫ —ç—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ
}

func AnalyzeGamingSkills() *GamingLegacy {
	legacy := &GamingLegacy{
		TotalGamesPlayed: 50, // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
		FavoriteGenres:   []string{"RPG", "Simulation", "Open World", "Strategy"},
		Skills:           make(map[string]int),
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º achievements
	legacy.Achievements = []GameAchievement{
		{
			Game:       "The Sims 2",
			Achievement: "–ü–æ—Å—Ç—Ä–æ–∏–ª —É—Å–ø–µ—à–Ω—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–µ–º—å—é",
			Date:       "2004",
			Impact:     "–†–∞–∑–≤–∏–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏",
		},
		{
			Game:       "GTA San Andreas",
			Achievement: "100% –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã",
			Date:       "2006",
			Impact:     "–£–ª—É—á—à–∏–ª persistence –∏ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å",
		},
		{
			Game:       "Age of Empires II",
			Achievement: "–ü–æ–±–µ–¥–∏–ª –≤ —Ö–∞—Ä–¥–∫–æ—Ä —Ä–µ–∂–∏–º–µ",
			Date:       "2008",
			Impact:     "–†–∞–∑–≤–∏–ª –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å",
		},
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏
	legacy.Skills = map[string]int{
		"–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": 85,
		"–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π":    80,
		"–ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å":             75,
		"–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º":       70,
		"–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ":         65,
		"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏":        80,
		"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ":   75,
	}

	return legacy
}

func (g *GamingLegacy) DisplaySkillsAnalysis() {
	fmt.Println("\nüéÆ –ê–ù–ê–õ–ò–ó –ò–ì–†–û–í–´–• –ù–ê–í–´–ö–û–í:")
	fmt.Println("=========================")

	for skill, level := range g.Skills {
		visualLevel := ""
		for i := 0; i < level/10; i++ {
			visualLevel += "‚ñà"
		}
		for i := level/10; i < 10; i++ {
			visualLevel += "‚ñë"
		}
		fmt.Printf("   %-30s [%s] %d%%\n", skill, visualLevel, level)
		time.Sleep(200 * time.Millisecond)
	}
}

func (g *GamingLegacy) CalculateITPotential() {
	fmt.Println("\nüöÄ –ü–û–¢–ï–ù–¶–ò–ê–õ –î–õ–Ø IT:")
	fmt.Println("===================")

	skillConversions := map[string]string{
		"–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ü–û –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤",
		"–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π":    "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –¥–µ–±–∞–≥–≥–∏–Ω–≥",
		"–ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å":             "Concurrent programming",
		"–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º":       "System design –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
		"–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ":         "UI/UX design –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
		"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏":        "Memory management –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
		"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ":   "Data structures –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã",
	}

	fmt.Println("üí´ –ò–≥—Ä–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ ‚Üí IT –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:")
	for gameSkill, itSkill := range skillConversions {
		level := g.Skills[gameSkill]
		fmt.Printf("   üéÆ %-28s ‚Üí üíª %s (—É—Ä–æ–≤–µ–Ω—å: %d%%)\n", gameSkill, itSkill, level)
		time.Sleep(300 * time.Millisecond)
	}
}

